datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id                Int       @default(autoincrement()) @id
  email             String    @unique
  username          String    @unique
  password          String
  date_of_birth     DateTime  @default(now())
  profile_image     String
  age               Int
  image_background  String
  about             String?
  announcement      Announcement[]
  book              Book[]
  audioBook         AudioBook[]
  following         Following[] @relation("Following")
  followers         Following[] @relation("UserFollowers")
  receiver          Messages[]  @relation("Receiver")
  sender            Messages[]  @relation("Sender")
  progress          ReadingProgress[]
  privateNotes      PrivateNotes[]
  library           Library?
  bookCase          BookCase?
  readingListId     Int?
  readingList       ReadingList?  @relation(fields: [readingListId], references: [id])
}

model Announcement {
  id          Int     @default(autoincrement()) @id
  title       String
  content     String
  date        DateTime @default(now()) 
  authorId    Int     
  author      User    @relation(fields: [authorId], references: [id])
}

model Book {
  id                Int         @default(autoincrement()) @id
  title             String
  section           Section[]
  analysis          Analysis[]
  publish_date      DateTime    @default(now())
  bookCover         String
  comments          Comments[]
  publish           Boolean     @default(false)
  hashtag           Hashtags[]
  audioBook         AudioBook[]
  category          Category[]
  privateNote       PrivateNotes[]
  progress          ReadingProgress[]
  userId            Int
  user              User        @relation(fields: [userId], references: [id])
  libraryId         Int
  library           Library     @relation(fields: [libraryId], references: [id])
  bookCaseId        Int
  bookCase          BookCase    @relation(fields: [bookCaseId], references: [id])
  readingListId     Int
  readingList       ReadingList  @relation(fields: [readingListId], references: [id])
}

model Section {
  id         Int         @default(autoincrement()) @id
  title      String
  content    String
  date       DateTime    @default(now())
  bookId     Int
  book       Book        @relation(fields: [bookId], references: [id])
  analysis   Analysis[]
  comments   Comments[]
}

model Analysis {
  id           Int       @default(autoincrement()) @id
  like_count   Int
  view_count   Int
  read_count   Int
  sectionId    Int
  section      Section  @relation(fields: [sectionId], references: [id])
  bookId       Int
  book         Book     @relation(fields: [bookId], references: [id])
  
}

model Comments {
  id              Int       @default(autoincrement()) @id
  content         String
  publish_date    DateTime  @default(now())
  bookId          Int
  book            Book      @relation(fields: [bookId], references: [id])
  sectionId       Int
  section         Section   @relation(fields: [sectionId], references: [id])
}

model Following {
  id            Int      @default(autoincrement()) @id
  date          DateTime @default(now())
  followersId   Int
  followingId   Int
  follower      User    @relation("UserFollowers", fields: [followersId], references: [id])
  following     User    @relation("Following", fields: [followingId], references: [id])
  @@unique([followersId, followingId]) // Aynı kullanıcı çiftinin birden fazla ilişki kurmasını engeller
}

model Messages {
  id          Int      @default(autoincrement()) @id
  date        DateTime @default(now())
  content     String
  receiverId  Int
  senderId    Int
  receiver    User    @relation("Receiver", fields: [receiverId], references: [id])
  sender      User    @relation("Sender", fields: [senderId], references: [id])
}

model Hashtags {
  id         Int       @default(autoincrement()) @id
  name       String
  bookId     Int?
  book       Book?    @relation(fields: [bookId], references: [id])
  audioBookId Int?
  audioBook  AudioBook? @relation(fields: [audioBookId], references: [id])
}

model AudioBook {
  id              Int       @default(autoincrement()) @id
  title           String
  episodes        String
  duration        String
  bookCover       String    
  publish_date    DateTime @default(now())
  bookId          Int?
  book            Book?    @relation(fields: [bookId], references: [id])
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  hashtags        Hashtags[]
  category        Category[]
  libraryId       Int
  library         Library     @relation(fields: [libraryId], references: [id])
  bookCaseId      Int
  bookCase        BookCase    @relation(fields: [bookCaseId], references: [id])
  readingListId     Int
  readingList       ReadingList  @relation(fields: [readingListId], references: [id])
}

model Category {
  id          Int       @default(autoincrement()) @id
  name        String    @unique
  bookId      Int?
  book        Book?    @relation(fields: [bookId], references: [id])
  audioBookId Int?
  audioBook   AudioBook? @relation(fields: [audioBookId], references: [id])
}

model ReadingProgress {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  progress  Int     //BI BASLANGIC NOKTAMDAN ILERLEYEBILDIGIM NOKTAYA KADAR OLAN KISIM / TAMAMI
  user      User    @relation(fields: [userId], references: [id])
  book      Book    @relation(fields: [bookId], references: [id])
  @@unique([userId, bookId])
}
model PrivateNotes{
  id        Int       @id @default(autoincrement())
  content   String
  date      DateTime  @default(now())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  bookId    Int
  book      Book     @relation(fields: [bookId], references: [id])
}

model Library { //kullanicinin yazdigi/seslendirdigi tum kitaplar
  id            Int         @id @default(autoincrement())
  books         Book[]
  audioBooks    AudioBook[]
  userId        Int         @unique
  user          User        @relation(fields: [userId], references: [id])
}

model BookCase { //kullanicinin okudugu/dinledigi ve okumaya/dinlemeye devam ettigi kitaplar
  id            Int       @id @default(autoincrement())
  books         Book[]
  audioBooks    AudioBook[]
  userId        Int         @unique
  user          User        @relation(fields: [userId], references: [id])
}

model ReadingList {
  id        Int       @id @default(autoincrement())
  books         Book[]
  audioBooks    AudioBook[]
  user          User[]
}