datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int       @default(autoincrement()) @id
  email             String    @unique
  username          String    @unique
  password          String
  birthdate         DateTime  
  profile_image     String?
  age               Int?
  image_background  String?
  about             String?
  announcement      Announcement[]
  book              Book[]
  audioBook         AudioBook[]
  following         Following[] @relation("Following") 
  followers         Following[] @relation("UserFollowers")
  receiver          Messages[]  @relation("Receiver")
  sender            Messages[]  @relation("Sender")
  chapter           Chapter[]
  library           Library[]
  bookCase          BookCase[]
  readingList       ReadingList[]
  comment           Comments[]
  notification      Notification[]
  episodes          Episodes[]
  category          UserCategory[]
  visible           MessageVisibility[]
  post              Post[]
  like              Like[]
  repost             Repost[]
}

model Book {
  id                Int             @default(autoincrement()) @id
  title             String          @unique 
  summary           String          
  normalizedTitle   String 
  chapter           Chapter[]
  analysis          Analysis[]
  publish_date      DateTime        @default(now())
  bookCover         String
  comments          Comments[]
  publish           Boolean         @default(false)
  isAudioBook       Boolean      
  hashtags          BookHashtags[]
  audioBook         AudioBook[]
  categories        BookCategory[] 
  ageRange          AgeRange[]      
  bookCopyright     BookCopyright[]
  userId            Int
  user              User            @relation(fields: [userId], references: [id])
  library           Library[]       @relation("LibraryBooks")
  bookCase          BookCase[]      @relation("BookCaseBooks")
  readingList       ReadingList[]   @relation("ReadingListBooks")
}

model Post {
  id                Int             @default(autoincrement()) @id
  originalPostId    Int?
  userId            Int
  user              User            @relation(fields: [userId], references: [id])
  content           String
  image             String?
  createdAt         DateTime        @default(now()) 
  analysis          Analysis[]
  comments          Comments[]
  like              Like[]
  repost             Repost[]
}
model Announcement {
  id          Int     @default(autoincrement()) @id
  title       String
  content     String
  date        DateTime @default(now()) 
  deletedAt   DateTime?
  authorId    Int     
  author      User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
}
model Chapter { 
  id                Int         @default(autoincrement()) @id
  title             String
  normalizedTitle   String
  content           String
  image             String?  
  date              DateTime    @default(now())
  publish           Boolean     @default(false)
  bookId            Int
  book              Book        @relation(fields: [bookId], references: [id], onDelete: Cascade)
  userId            Int
  user              User        @relation(fields: [userId], references: [id])
  analysis          Analysis[]
  comments          Comments[]
}

model Analysis {
  id                Int           @default(autoincrement()) @id
  like_count        Int?          @default(0)
  comment_count     Int?          @default(0)
  read_count        Int?          @default(0)
  repost_count      Int?
  chapterId         Int?
  chapter           Chapter?      @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  bookId            Int?
  book              Book?         @relation(fields: [bookId], references: [id], onDelete: Cascade)
  postId            Int?          
  post              Post?         @relation(fields: [postId], references: [id], onDelete: Cascade)
  audioBookId       Int?
  audioBook         AudioBook?    @relation(fields: [audioBookId], references: [id], onDelete: Cascade)
  episodeId         Int?
  episode           Episodes?     @relation(fields: [episodeId], references: [id], onDelete:Cascade)
  commentId         Int?                      
  comment           Comments?     @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Repost {
  id          Int     @id @default(autoincrement())
  userId      Int
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId      Int?
  post        Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id          Int     @id @default(autoincrement())
  userId      Int
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId      Int?
  post        Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId   Int?
  comment     Comments? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}
model Comments {
  id                Int         @default(autoincrement()) @id
  content           String
  publish_date      DateTime    @default(now())
  chapterId         Int?        
  chapter           Chapter?    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  bookId            Int?        
  book              Book?       @relation(fields: [bookId], references: [id], onDelete: Cascade)
  audioBookId       Int?        
  audioBook         AudioBook?  @relation(fields: [audioBookId], references: [id], onDelete: Cascade)
  episodeId         Int?        
  episode           Episodes?   @relation(fields: [episodeId], references: [id], onDelete:Cascade)
  userId            Int         
  user              User        @relation(fields: [userId], references: [id])
  postId            Int?        
  post              Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  like              Like[]
  parentCommentId   Int?        
  parentComment     Comments?   @relation("ParentComment", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies           Comments[]  @relation("ParentComment") 
  analysis          Analysis[]
}

model Following {
  id            Int      @default(autoincrement()) @id
  date          DateTime @default(now())
  followersId   Int
  followingId   Int
  follower      User    @relation("UserFollowers", fields: [followersId], references: [id])
  following     User    @relation("Following", fields: [followingId], references: [id])
  @@unique([followersId, followingId]) // Aynı kullanıcı çiftinin birden fazla ilişki kurmasını engeller
}

model Messages {
  id          Int      @default(autoincrement()) @id
  date        DateTime @default(now())
  content     String
  isRead      Boolean  @default(false)
  receiverId  Int
  senderId    Int
  receiver    User    @relation("Receiver", fields: [receiverId], references: [id])
  sender      User    @relation("Sender", fields: [senderId], references: [id])
  visible     MessageVisibility[]
}

model MessageVisibility {
  id          Int      @default(autoincrement()) @id
  messageId   Int
  userId      Int
  isVisible   Boolean  @default(true)
  message     Messages @relation(fields: [messageId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model AudioBook {
  id                Int              @default(autoincrement()) @id
  title             String           @unique
  summary           String  
  normalizedTitle   String 
  episodes          Episodes[]
  duration          String
  bookCover         String    
  publish_date      DateTime        @default(now())
  publish           Boolean         @default(false)
  bookId            Int?
  book              Book?           @relation(fields: [bookId], references: [id], onDelete: Cascade)
  userId            Int             
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  hashtags          AudioBookHashtags[]
  category          AudioBookCategory[]
  bookCopyright     AudioBookCopyright[]
  ageRange          AudioBookAgeRange[]
  library           Library[]       @relation("LibraryAudioBooks")
  bookcase          BookCase[]      @relation("BookCaseAudioBooks") 
  readingList       ReadingList[]   @relation("ReadingListAudioBooks")
  analysis          Analysis[]
  comments          Comments[]    
}

model Episodes {
  id              Int             @default(autoincrement()) @id
  title           String
  normalizedTitle String 
  duration        String
  image           String?  
  textFile        String?
  audioFile       String?
  publish_date    DateTime        @default(now())
  publish         Boolean         @default(false)
  userId          Int
  user            User            @relation(fields: [userId], references: [id])
  audiobookId     Int?
  audiobook       AudioBook?      @relation(fields: [audiobookId], references: [id], onDelete: Cascade)
  analysis        Analysis[]
  comments        Comments[]
}

model Hashtags {
  id                      Int         @default(autoincrement()) @id
  name                    String      @unique 
  isDefault               Boolean     @default(false)
  bookHashtags            BookHashtags[]
  audioBookHashtags       AudioBookHashtags[]
}

model BookHashtags{
  bookId        Int       
  hashtagsId    Int
  book          Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  hashtag       Hashtags  @relation(fields: [hashtagsId], references: [id])
  @@id([bookId, hashtagsId])
}

model AudioBookHashtags{
  audioBookId        Int
  hashtagsId         Int
  audioBook          AudioBook      @relation(fields: [audioBookId], references: [id], onDelete: Cascade)
  hashtag            Hashtags       @relation(fields: [hashtagsId], references: [id])
  @@id([audioBookId, hashtagsId])
}

model Range {
  id                  Int      @default(autoincrement()) @id
  range               String   @unique
  ageRange            AgeRange[]
  audioBookAgeRange   AudioBookAgeRange[]
}

model AgeRange {
  rangeId       Int         
  bookId        Int
  book          Book        @relation(fields: [bookId], references: [id],  onDelete: Cascade)
  range         Range       @relation(fields: [rangeId], references: [id],  onDelete: Cascade)
  @@id([rangeId, bookId])
}

model AudioBookAgeRange {
  rangeId       Int       
  audioBookId   Int        
  audioBook     AudioBook   @relation(fields: [audioBookId], references: [id], onDelete: Cascade)  
  range         Range       @relation(fields: [rangeId], references: [id],  onDelete: Cascade)
  @@id([rangeId, audioBookId])
}

model Copyright {
  id                  Int      @default(autoincrement()) @id
  copyright           String
  bookCopyRight       BookCopyright[]
  audioBookCopyRight  AudioBookCopyright[]
}

model BookCopyright {
  bookCopyrightId   Int         
  bookId            Int
  book              Book        @relation(fields: [bookId], references: [id],  onDelete: Cascade)
  copyright         Copyright   @relation(fields: [bookCopyrightId], references: [id])
  @@id([bookId, bookCopyrightId])
}
model AudioBookCopyright {
  bookCopyrightId     Int
  audioBookId         Int
  audioBook           AudioBook        @relation(fields: [audioBookId], references: [id] ,onDelete: Cascade)
  copyright           Copyright         @relation(fields: [bookCopyrightId], references: [id])
  @@id([audioBookId, bookCopyrightId])
}
model Category {
  id                    Int       @default(autoincrement()) @id
  name                  String    @unique
  imageUrl              String
  userCategories        UserCategory[]
  bookCategories        BookCategory[]
  audioBookCategories   AudioBookCategory[]
}

model UserCategory {
  userId        Int
  categoryId    Int
  user          User      @relation(fields: [userId], references: [id])
  category      Category  @relation(fields: [categoryId], references: [id])
  @@id([userId, categoryId])
}

model BookCategory {
  bookId        Int
  categoryId    Int
  book          Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  category      Category  @relation(fields: [categoryId], references: [id])
  @@id([bookId, categoryId])
}

model AudioBookCategory {
  audioBookId   Int
  categoryId    Int
  audioBook     AudioBook      @relation(fields: [audioBookId], references: [id], onDelete: Cascade)
  category      Category       @relation(fields: [categoryId], references: [id])
  @@id([audioBookId, categoryId])
}

model Notification {
  id          Int       @default(autoincrement()) @id
  message     String
  userId      Int       
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  isRead      Boolean   @default(false)  
  createdAt   DateTime  @default(now())  
}
model Library {
  id            Int          @id @default(autoincrement())
  userId        Int          @unique
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  books         Book[]       @relation("LibraryBooks") 
  audioBooks    AudioBook[]  @relation("LibraryAudioBooks")
}

model BookCase { //kullanicinin okudugu/dinledigi ve okumaya/dinlemeye devam ettigi kitaplar
  id            Int          @id @default(autoincrement())
  userId        Int          @unique
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  books         Book[]       @relation("BookCaseBooks")   
  audioBooks    AudioBook[]  @relation("BookCaseAudioBooks")
  createdAt     DateTime     @default(now())  
}

model ReadingList {
  id            Int          @id @default(autoincrement())
  userId        Int          @unique
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  books         Book[]       @relation("ReadingListBooks")   
  audioBooks    AudioBook[]  @relation("ReadingListAudioBooks")
}